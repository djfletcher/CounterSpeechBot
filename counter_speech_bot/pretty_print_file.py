import argparse
import json


class PrettyPrintToxicTweets:
    """ Ironic name, I know """

    def __init__(self, args):
        self.toxic_tweets_file = args.toxic_tweets_file

    def get_attribute_score(self, analysis, attribute):
        """ Helper to get the score of a particular attribute from the perspective API response """
        return analysis['attributeScores'][attribute]['summaryScore']['value']

    def pretty_print(self, toxic_tweet_dict, count):
        print('------------------------------------------------')
        print(f"    {count} {self._format_tweet(toxic_tweet_dict['tweet'])}")
        self._print_formatted_analysis(toxic_tweet_dict['analysis'], padding='      ')
        print(f"\nPotential reply: '{toxic_tweet_dict['potential_reply']}'")

    def _format_tweet(self, tweet):
        author = tweet['includes']['users'][0]['name']
        text = tweet['data']['text']
        return f"{author} -> {text}"

    def _print_formatted_analysis(self, analysis, padding=''):
        for attribute in analysis['attributeScores']:
            print(f"{padding}- {attribute}: {self.get_attribute_score(analysis, attribute)}")

    def main(self):
        count = 1
        with open(self.toxic_tweets_file, 'r') as f:
            for line in f:
                toxic_tweet_dict = json.loads(line)
                self.pretty_print(toxic_tweet_dict, count)
                count += 1

        print(f"\n\nPrinted {count} toxic tweets")


if __name__ == '__main__':
    """
    Example command:
    python -m counter_speech_bot.pretty_print_file --toxic-tweets-file toxic_tweets_2020-11-19_130707.txt
    """
    parser = argparse.ArgumentParser(
        description='Pretty prints a file of toxic tweets generated by counter_speech_bot.realtime_bot'
    )
    parser.add_argument('--toxic-tweets-file', required=True, type=str, help='Path to and name of file containing tweets identified as toxic')
    args = parser.parse_args()
    PrettyPrintToxicTweets(args).main()
